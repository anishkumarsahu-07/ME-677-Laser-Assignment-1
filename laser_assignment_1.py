# -*- coding: utf-8 -*-
"""Laser Assignment-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1udVmR_RcN6-3U8_Qup2vVA30Y0yAHlIU
"""

import numpy as np
import matplotlib.pyplot as plt
import scipy.special as sp

# Material Properties (Iron)
rho = 7800  # Density (kg/m^3)
cp = 450  # Specific heat capacity (J/kg.K)
K = 80  # Thermal conductivity (W/m.K)
D = K / (rho * cp)  # Thermal diffusivity (m^2/s)

# Laser Parameters
fluence, t_pulse = 800, 8e-8  # Adjusted fluence and pulse duration
q_max = fluence / t_pulse  # Peak Heat Flux (W/m²)

# Simulation Parameters
L = 400e-6  # Depth (m)
t_total = 8e-5  # Total simulation time (s)
M = 101  # Number of spatial points
N = 1001  # Number of time points
x = np.linspace(0, L, M)  # Spatial Grid
t = np.linspace(0, t_total, N)  # Time Grid
dx = L / (M - 1)
dt = t_total / (N - 1)  # Step Sizes

# Stability Check
if D * dt / dx**2 > 0.5:
    raise ValueError("Unstable CFL condition! Reduce dt or increase dx.")

# Analytical Solution
def ierfc(u):
    return np.exp(-u**2) / np.sqrt(np.pi) - u * (1 - sp.erf(u))

def analytical_temp(x, t):
    if t <= t_pulse:
        return 300 + (2 * q_max / K) * np.sqrt(D * t) * ierfc(x / (2 * np.sqrt(D * t)))
    else:
        return 300 + (2 * q_max / K) * np.sqrt(D) * (np.sqrt(t) * ierfc(x / (2 * np.sqrt(D * t))) - np.sqrt(t - t_pulse) * ierfc(x / (2 * np.sqrt(D * (t - t_pulse)))))

T_ana = [analytical_temp(xi, t_total) for xi in x]

# Heat penetration depth calculation
def penetration_depth(time, alpha):
    return 2 * np.sqrt(alpha * time) * 1e6  # Convert to micrometers

# Finite Difference Method (FDM)
T_fdm = np.full((M, N), 300.0)  # Initial Temperature Grid

for n in range(1, N):
    q = q_max if t[n] <= t_pulse else 0  # Pulsed Heat Source

    # Explicit Scheme
    T_fdm[0, n] = T_fdm[0, n-1] + (K * (T_fdm[1, n-1] - T_fdm[0, n-1]) / dx + q) * dt / (rho * cp * dx)
    T_fdm[1:-1, n] = T_fdm[1:-1, n-1] + D * dt / dx**2 * (T_fdm[:-2, n-1] - 2*T_fdm[1:-1, n-1] + T_fdm[2:, n-1])
    T_fdm[-1, n] = T_fdm[-2, n-1]

# Generate plots
fig, axes = plt.subplots(2, 2, figsize=(12, 10))

# (1) Closed solution Temperature Profile
for t_sample in [0, 1e-6, 2e-6, 5e-6, 8e-6, 10e-6]:
    axes[0, 0].plot(x * 1e6, [analytical_temp(xi, t_sample) for xi in x], label=f't={t_sample*1e6:.1f} µs')
axes[0, 0].set(title="Closed Solution", xlabel="Depth (µm)", ylabel="Temperature (K)")
axes[0, 0].legend()
axes[0, 0].grid()

# (2) Temperature Evolution at Different Depths
depths = [0, 7.5e-6, 2e-5, 3.5e-5, 5e-5, 10e-5]
for d in depths:
    idx = np.argmin(np.abs(x - d))
    axes[0, 1].plot(t * 1e6, T_fdm[idx, :], label=f'Depth={d*1e6:.1f} µm')
axes[0, 1].set(title="Temperature Evolution", xlabel="Time (µs)", ylabel="Temperature (K)")
axes[0, 1].legend()
axes[0, 1].grid()

# (3) FDM Temperature Profile
for t_sample in [0, 1e-6, 2e-6, 5e-6, 8e-6, 10e-6]:
    idx = np.argmin(np.abs(t - t_sample))
    axes[1, 0].plot(x * 1e6, T_fdm[:, idx], label=f't={t_sample*1e6:.1f} µs')
axes[1, 0].set(title="FDM Solution", xlabel="Depth (µm)", ylabel="Temperature (K)")
axes[1, 0].legend()
axes[1, 0].grid()

# (4) Heat penetration depth vs. time
penetration_depths = [penetration_depth(ti, D) for ti in t]
axes[1, 1].plot(t * 1e6, penetration_depths, 'k-')
axes[1, 1].set(title="Heat Penetration Depth vs Time", xlabel="Time (µs)", ylabel="Penetration Depth (µm)")
axes[1, 1].grid()

# Adjust layout and show plot
plt.tight_layout()
plt.show()

# Final Profile Comparison
plt.figure(figsize=(10, 6))
plt.plot(x * 1e6, T_fdm[:, -1], 'b-', label='FDM')
plt.plot(x * 1e6, T_ana, 'r--', label='Closed Solution')
plt.xlabel("Depth (µm)")
plt.ylabel("Temperature (K)")
plt.title(f"Temperature Profile at t = {t_total*1e6:.1f} µs")
plt.legend()
plt.grid()
plt.show()